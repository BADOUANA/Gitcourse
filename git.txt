Commandes git:

git --version //version
git init //debut de projet
git status //
git add // ajouter un dossier ou un fichier dans git
	* add. afficher tout ce qui en dessous de toi
	* add -A ajouter tout ce qui est autour de toi
git reset // annuler les modifications prises en compte
git commit // un commit c'est une version
git log // connaitre toutes les modifs

git log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%
C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%
C(bold yellow)%d%C(reset)%n'' %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all 

// le texte en bleu foncé c'est le hashage du commit


 git config alias.tree "log --graph --abbrev-commit --decorate --format=format:
'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C
(bold yellow)%d%C(reset)%n'' %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all"

// mettre une commande en alias

git ignore // tout ce qu'on ne prend pas en compte

git branch // lister les branches
git checkout [nom] ou git switch [nom] // changer de branche
git checkout -b feature ou git switch -c feature // creer une branche et switcher dessus


git rebase # git checkout [nom_branche] //  rebase permet de faire le fast forward only qui va changer 
l'ancienne version consideree comme main à la nouvelle qui est là où on a merge les dernières modifs 
et où on veut placer l'ancien "main"

|/ devient | pour "git rebase"
 
             |\
|/ devient   |/  pour git merge
  
git commit --allow-empty -m "ajout9" // faire une modification vide

git merge --f-only feature // change l'ancienne branche 
main ou master en feature qui devient la nouvelle branche "main".
